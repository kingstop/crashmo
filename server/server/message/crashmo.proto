package message;
import "common.proto";

enum ServerError
{
	ServerError_NO = 0;
	ServerError_Unknow = 1;
	ServerError_HaveSameName = 2;
	ServerError_NotFoundMapNameWhenDel = 3;
	ServerError_PassOfficilMapFailedTheMapIsLock = 4;
	ServerError_PassOfficilMapFailedTheMapNotFound = 5;
	ServerError_FailedToPublishMapTheTimeIsInCD = 6;
	
}

message MsgIntStringProto
{
	required int32 intger_temp = 1;
	required string string_temp = 2;
}

message MsgServerErrorNotify
{
	required ServerError error = 1 [default = ServerError_NO];
}

message CrashmoClientInit
{
	required CrashPlayerInfo info = 1;
	repeated MsgIntStringProto chapter_names = 2;
	repeated intPair resources_config_max = 3;
	required int32 map_width_config_max = 4;
	required int32 map_height_config_max = 5;
	required int32 map_count_max = 6;
}


message MsgLoadUserMapReq
{
	//repeated uint64 map_indexes = 1;
	required int32 map_count = 1;
}


message MsgUserMap
{
	required CrashMapData map = 1;
	required bool complete = 2;
}

message MsgLoadUserMapACK
{
	repeated MsgUserMap maps = 1;
	required bool end = 2;
	
}


message MsgSaveMapReq
{
	required CrashMapData map = 1;
	required MapType save_type = 2 [default = OfficeMap];
}

message MsgDelMapReq
{
	required uint64 map_index = 1;
}

message MsgDelMapACK
{
	required uint64 map_index = 1;
	required MapType map_type = 2 [default = OfficeMap];
	required ServerError error = 3 [default = ServerError_NO];
	
}

message MsgSaveMapACK
{
	required MapType save_type = 1 [default = OfficeMap];
	required CrashMapData map = 2;
	required ServerError error = 3 [default = ServerError_NO];
}

message MsgOfficilMapReq
{
	required int32 page = 1;
}

message MsgOfficilMapACK
{
	required int32 page = 1;
	repeated CrashMapData maps = 2;
}

message MsgModifySectionNameReq
{
	required int32 section = 1;
	required string section_name = 2;
}

message MsgModifySectionNameACK
{
	required int32 section = 1;
	required string section_name = 2;
}


message MsgSectionNameReq
{

}



message MsgSectionNameACK
{
	repeated MsgIntStringProto sections = 1;
}

message MsgS2CNotifyPing
{
	required int64 time_stamp = 1;
	required int32 ping_count = 2;
}

message MsgC2SOfficeStatusReq
{
	 
}
message MsgChapterStatus
{
	required int32 chapter_id = 1;
	repeated uint64 map_indexs = 2;
}
message MsgS2COfficeStatusACK
{
	repeated MsgChapterStatus chapter_status = 1;
}


message MsgC2SOfficeMapReq
{
	required int32 chapter_id = 1;
	required int32 section_id = 2;
	required int32 map_count = 3;
	repeated uint64 map_indexs = 4;
}

message MsgS2COfficeMapACK
{
	required int32 chapter_id = 1;
	repeated CrashMapData maps = 3;
}

message MsgC2SRankMapReq
{
	required int32 rank_begin = 1;
	required int64 time_stamp = 2;
	required int32 map_count = 3;
}

message MsgS2CRankMapACK
{
	repeated CrashPlayerPublishMap maps = 1;
	required int32 end_rank  = 2;
	required int64 time_stamp = 3;
	required int32 rank_map_count = 4;
}

message MsgS2CRankMapRefreshNotify
{
	required int64 time_stamp = 1;	
}

message MsgC2SReqLoadTaskConfigs
{
	required int32 begin_id = 1;
	required int32 load_count = 2;
}

message MsgS2CLoadTaskConfigsACK
{
	repeated TaskInfoConfig task_configs = 1;
	required int32 total_task_count = 2;
}

message MsgC2SReqModifyTaskInfo
{
	required TaskInfoConfig info = 1;
}

message MsgS2CModifyTaskInfoACK
{
	required TaskInfoConfig info = 1;
}


message MsgC2SReqAddMapBolg
{
	required RankMapBlogEntry info = 1;
	required MapType type = 2  [default = OfficeMap];
	required int64 map_index = 3;
	required int32 chapter_id = 4;
	required int32 section_id = 5;
}

message MsgS2CMapBolgACK
{

}

message MsgC2SReqEnterOfficilMap
{
	required uint32 chapter_id = 1;
	required uint32 section_id = 2;

}


message MsgS2CEnterOfficilMapACK
{
	required uint32 chapter_id = 1;
	required uint32 section_id = 2;
}

message MsgC2SReqPassOfficilMap
{
	required uint32 chapter_id = 1;
	required uint32 section_id = 2;
	required uint32 use_time = 3;
	required uint32 use_step = 4;
}

message MsgTaskReward
{
	required uint32 task_id = 1;
	repeated TaskRewardConfig rewards = 2;
	required string task_name = 3;
}

message MsgS2CPassOfficilMapACK
{
	required uint32 chapter_id = 1;
	required uint32 section_id = 2;
	required uint32 add_gold = 3;
	repeated intPair add_resource = 4;
	required uint32 current_gold = 5;
	repeated intPair current_resource = 6;
	repeated MsgTaskReward complete_task = 7;
	required ServerError error = 8 [default = ServerError_NO];
}

message MsgS2CNewTaskNotify
{
	required TaskInfo info = 1;
}

message MsgC2SReqPlayerPublishMap
{
	required CrashMapData map = 1;
}

message MsgS2CPlayerPublishMapACK
{
	required CrashPlayerPublishMap map = 1;
}
message MsgC2SReqPublishMapList
{
	required uint64 begin_map_index = 1;
	required int32 req_count = 2;
}

message MsgS2CPublishMapListACK
{
	required uint64 end_map_index = 1;
	required int32 req_count = 2;
	repeated CrashPlayerPublishMap maps = 3;

}